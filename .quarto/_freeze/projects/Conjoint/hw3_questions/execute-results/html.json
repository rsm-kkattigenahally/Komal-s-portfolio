{
  "hash": "740bf9e93f408ae136e6ae6e47bfe7c0",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"MLE and Conjoint Analysis\"\nauthor: \"Komal Nagaraj\"\ndate: today\n---\n\n\n\nThis assignment explores two methods for estimating the MNL model: (1) via Maximum Likelihood, and (2) via a Bayesian approach using a Metropolis-Hastings MCMC algorithm. \n\n\n## 1. Likelihood for the Multi-nomial Logit (MNL) Model\n\nSuppose we have $i=1,\\ldots,n$ consumers who each select exactly one product $j$ from a set of $J$ products. The outcome variable is the identity of the product chosen $y_i \\in \\{1, \\ldots, J\\}$ or equivalently a vector of $J-1$ zeros and $1$ one, where the $1$ indicates the selected product. For example, if the third product was chosen out of 3 products, then either $y=3$ or $y=(0,0,1)$ depending on how we want to represent it. Suppose also that we have a vector of data on each product $x_j$ (eg, brand, price, etc.). \n\nWe model the consumer's decision as the selection of the product that provides the most utility, and we'll specify the utility function as a linear function of the product characteristics:\n\n$$ U_{ij} = x_j'\\beta + \\epsilon_{ij} $$\n\nwhere $\\epsilon_{ij}$ is an i.i.d. extreme value error term. \n\nThe choice of the i.i.d. extreme value error term leads to a closed-form expression for the probability that consumer $i$ chooses product $j$:\n\n$$ \\mathbb{P}_i(j) = \\frac{e^{x_j'\\beta}}{\\sum_{k=1}^Je^{x_k'\\beta}} $$\n\nFor example, if there are 3 products, the probability that consumer $i$ chooses product 3 is:\n\n$$ \\mathbb{P}_i(3) = \\frac{e^{x_3'\\beta}}{e^{x_1'\\beta} + e^{x_2'\\beta} + e^{x_3'\\beta}} $$\n\nA clever way to write the individual likelihood function for consumer $i$ is the product of the $J$ probabilities, each raised to the power of an indicator variable ($\\delta_{ij}$) that indicates the chosen product:\n\n$$ L_i(\\beta) = \\prod_{j=1}^J \\mathbb{P}_i(j)^{\\delta_{ij}} = \\mathbb{P}_i(1)^{\\delta_{i1}} \\times \\ldots \\times \\mathbb{P}_i(J)^{\\delta_{iJ}}$$\n\nNotice that if the consumer selected product $j=3$, then $\\delta_{i3}=1$ while $\\delta_{i1}=\\delta_{i2}=0$ and the likelihood is:\n\n$$ L_i(\\beta) = \\mathbb{P}_i(1)^0 \\times \\mathbb{P}_i(2)^0 \\times \\mathbb{P}_i(3)^1 = \\mathbb{P}_i(3) = \\frac{e^{x_3'\\beta}}{\\sum_{k=1}^3e^{x_k'\\beta}} $$\n\nThe joint likelihood (across all consumers) is the product of the $n$ individual likelihoods:\n\n$$ L_n(\\beta) = \\prod_{i=1}^n L_i(\\beta) = \\prod_{i=1}^n \\prod_{j=1}^J \\mathbb{P}_i(j)^{\\delta_{ij}} $$\n\nAnd the joint log-likelihood function is:\n\n$$ \\ell_n(\\beta) = \\sum_{i=1}^n \\sum_{j=1}^J \\delta_{ij} \\log(\\mathbb{P}_i(j)) $$\n\n\n\n## 2. Simulate Conjoint Data\n\nWe will simulate data from a conjoint experiment about video content streaming services. We elect to simulate 100 respondents, each completing 10 choice tasks, where they choose from three alternatives per task. For simplicity, there is not a \"no choice\" option; each simulated respondent must select one of the 3 alternatives. \n\nEach alternative is a hypothetical streaming offer consistent of three attributes: (1) brand is either Netflix, Amazon Prime, or Hulu; (2) ads can either be part of the experience, or it can be ad-free, and (3) price per month ranges from \\$4 to \\$32 in increments of \\$4.\n\nThe part-worths (ie, preference weights or beta parameters) for the attribute levels will be 1.0 for Netflix, 0.5 for Amazon Prime (with 0 for Hulu as the reference brand); -0.8 for included adverstisements (0 for ad-free); and -0.1*price so that utility to consumer $i$ for hypothethical streaming service $j$ is \n\n$$\nu_{ij} = (1 \\times Netflix_j) + (0.5 \\times Prime_j) + (-0.8*Ads_j) - 0.1\\times Price_j + \\varepsilon_{ij}\n$$\n\nwhere the variables are binary indicators and $\\varepsilon$ is Type 1 Extreme Value (ie, Gumble) distributed.\n\nThe following code provides the simulation of the conjoint data.\n\n:::: {.callout-note collapse=\"true\"}\n\n::: {#18e3fd21 .cell execution_count=1}\n``` {.python .cell-code}\nimport numpy as np\nimport pandas as pd\n\n# Set seed for reproducibility\nnp.random.seed(123)\n\n# Define attributes\nbrands = [\"N\", \"P\", \"H\"]  # Netflix, Prime, Hulu\nads = [\"Yes\", \"No\"]\nprices = list(range(8, 33, 4))\n\n# Generate all possible profiles\nprofiles = pd.DataFrame(\n    [(b, a, p) for b in brands for a in ads for p in prices],\n    columns=[\"brand\", \"ad\", \"price\"]\n)\nm = len(profiles)\n\n# Assign part-worth utilities\nb_util = {\"N\": 1.0, \"P\": 0.5, \"H\": 0.0}\na_util = {\"Yes\": -0.8, \"No\": 0.0}\np_util = lambda p: -0.1 * p\n\n# Parameters\nn_peeps = 100\nn_tasks = 10\nn_alts = 3\n\n# Simulate one respondent's data\ndef sim_one(resp_id):\n    tasks = []\n\n    for t in range(1, n_tasks + 1):\n        # Sample 3 alternatives randomly\n        sampled = profiles.sample(n=n_alts, replace=False).copy()\n        sampled[\"resp\"] = resp_id\n        sampled[\"task\"] = t\n\n        # Compute deterministic utility\n        sampled[\"v\"] = sampled[\"brand\"].map(b_util) + \\\n                       sampled[\"ad\"].map(a_util) + \\\n                       sampled[\"price\"].apply(p_util)\n        \n        # Add Gumbel noise (Type I extreme value)\n        sampled[\"e\"] = -np.log(-np.log(np.random.uniform(size=n_alts)))\n        sampled[\"u\"] = sampled[\"v\"] + sampled[\"e\"]\n\n        # Determine choice\n        sampled[\"choice\"] = (sampled[\"u\"] == sampled[\"u\"].max()).astype(int)\n\n        tasks.append(sampled[[\"resp\", \"task\", \"brand\", \"ad\", \"price\", \"choice\"]])\n\n    return pd.concat(tasks)\n\n# Simulate for all respondents\nconjoint_data = pd.concat([sim_one(i) for i in range(1, n_peeps + 1)], ignore_index=True)\nconjoint_data\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>resp</th>\n      <th>task</th>\n      <th>brand</th>\n      <th>ad</th>\n      <th>price</th>\n      <th>choice</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>1</td>\n      <td>P</td>\n      <td>No</td>\n      <td>32</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>1</td>\n      <td>N</td>\n      <td>No</td>\n      <td>28</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>1</td>\n      <td>N</td>\n      <td>No</td>\n      <td>24</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>2</td>\n      <td>H</td>\n      <td>No</td>\n      <td>28</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1</td>\n      <td>2</td>\n      <td>H</td>\n      <td>No</td>\n      <td>8</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>2995</th>\n      <td>100</td>\n      <td>9</td>\n      <td>P</td>\n      <td>Yes</td>\n      <td>12</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2996</th>\n      <td>100</td>\n      <td>9</td>\n      <td>P</td>\n      <td>No</td>\n      <td>24</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2997</th>\n      <td>100</td>\n      <td>10</td>\n      <td>H</td>\n      <td>No</td>\n      <td>20</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2998</th>\n      <td>100</td>\n      <td>10</td>\n      <td>H</td>\n      <td>Yes</td>\n      <td>8</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2999</th>\n      <td>100</td>\n      <td>10</td>\n      <td>N</td>\n      <td>No</td>\n      <td>16</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n<p>3000 rows Ã— 6 columns</p>\n</div>\n```\n:::\n:::\n\n\n::::\n\n\n\n## 3. Preparing the Data for Estimation\n\nThe \"hard part\" of the MNL likelihood function is organizing the data, as we need to keep track of 3 dimensions (consumer $i$, covariate $k$, and product $j$) instead of the typical 2 dimensions for cross-sectional regression models (consumer $i$ and covariate $k$). The fact that each task for each respondent has the same number of alternatives (3) helps.  In addition, we need to convert the categorical variables for brand and ads into binary variables.\n\n::: {#4c64242a .cell execution_count=2}\n``` {.python .cell-code}\ndf = pd.get_dummies(conjoint_data, columns=['brand', 'ad'], drop_first=True)\nbool_cols = df.select_dtypes(include='bool').columns\ndf[bool_cols] = df[bool_cols].astype(int)\ndf.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>resp</th>\n      <th>task</th>\n      <th>price</th>\n      <th>choice</th>\n      <th>brand_N</th>\n      <th>brand_P</th>\n      <th>ad_Yes</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>1</td>\n      <td>32</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>1</td>\n      <td>28</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>1</td>\n      <td>24</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>2</td>\n      <td>28</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1</td>\n      <td>2</td>\n      <td>8</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## 4. Estimation via Maximum Likelihood\n\nNext we define the maximum likelihood function to find the  $\\beta$ values for each parameter.\n\n::: {#a01164cf .cell execution_count=3}\n``` {.python .cell-code}\nX_cols = ['price', 'brand_N', 'brand_P', 'ad_Yes']\nX = df[X_cols].values\ny = df['choice'].values\n\nn_alts = 3\nn_sets = int(len(df) / n_alts)\n\ndef negative_log_likelihood(beta):\n    ll = 0\n    for i in range(n_sets):\n        start = i * n_alts\n        end = start + n_alts\n        X_i = X[start:end]\n        y_i = y[start:end]\n        utilities = X_i @ beta\n        utilities -= np.max(utilities)\n        exp_utilities = np.exp(utilities)\n        probabilities = exp_utilities / np.sum(exp_utilities)\n        ll += np.sum(y_i * np.log(probabilities + 1e-12))\n    return -ll\n```\n:::\n\n\nFurther, we use the scipy.optimize() function to find the MLEs for the 4 parameters as well as  their standard errors (from the Hessian). We also estimate a 95% confidence interval for each parameter estimate.\n\n::: {#c0027f41 .cell execution_count=4}\n``` {.python .cell-code}\nprint(\"MLE Estimation of beta\")\nfrom scipy.optimize import minimize\nimport scipy.stats as stats\n# Initial guess for parameters (zeros)\ninitial_beta = np.zeros(X.shape[1])\n\n# Estimate MLE using BFGS method\nresult = minimize(negative_log_likelihood, initial_beta, method='BFGS')\n\n# Estimated parameters\nbeta_hat = result.x\n\n# Inverse of Hessian gives variance-covariance matrix\nhessian_inv = result.hess_inv\nstandard_errors = np.sqrt(np.diag(hessian_inv))\n\n# 95% Confidence Intervals\nz = stats.norm.ppf(0.975)  # â‰ˆ 1.96\nconf_intervals = [(b - z*se, b + z*se) for b, se in zip(beta_hat, standard_errors)]\nmle_results={}\n# Display results\nfor name, b, se, ci in zip(X_cols, beta_hat, standard_errors, conf_intervals):\n    print(f\"{name}: beta = {b:.4f}, SE = {se:.4f}, 95% CI = ({ci[0]:.4f}, {ci[1]:.4f})\")\n    mle_results[name] = {\n        \"beta\": b,\n        \"se\": se,\n        \"ci\": (ci[0], ci[1])\n    }\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nMLE Estimation of beta\nprice: beta = -0.0964, SE = 0.0061, 95% CI = (-0.1084, -0.0844)\nbrand_N: beta = 1.0569, SE = 0.0120, 95% CI = (1.0333, 1.0804)\nbrand_P: beta = 0.4733, SE = 0.0709, 95% CI = (0.3344, 0.6122)\nad_Yes: beta = -0.7724, SE = 0.0313, 95% CI = (-0.8337, -0.7111)\n```\n:::\n:::\n\n\n## 5. Estimation via Bayesian Methods\nIn this section we are estimating the posterior distribution of 4 parameters in a MNL model using Bayesian inference. In other words we try to estimate \"Based on the observed choices (data), and what I believed about the parameters before (priors), what should I now believe (posterior)\"\n\nThe Baye's rule is given by - \n\n$$\nP(\\beta \\mid \\text{data}) \\propto {P(\\text{data} \\mid \\beta) \\cdot P(\\beta)}\n$$\n\nwhere $P(\\beta)$ = Prior\n$P(\\text{data} \\mid \\beta)$ = Likelihood\n$P(\\beta \\mid \\text{data})$ = Posterior\n\n::: {#3a88210a .cell execution_count=5}\n``` {.python .cell-code}\nn_alts = 3\nn_sets = int(len(df) / n_alts)\nn_params = X.shape[1]\n\ndef log_prior(beta):\n    logp_price = -0.5 * (beta[0] / 1)**2\n    logp_binaries = -0.5 * np.sum((beta[1:] / 5)**2)\n    return logp_price + logp_binaries\n\ndef log_posterior(beta):\n    return log_prior(beta) - negative_log_likelihood(beta) \n\n#Metropolis-Hastings MCMC Sampler\nn_samples = 11000\nburn_in = 1000\nsamples = np.zeros((n_samples, n_params))\n\n# Initial guess\ncurrent_beta = np.zeros(n_params)\ncurrent_log_post = log_posterior(current_beta)\n\n# Proposal SDs: binary vars = 0.05, price = 0.005\nproposal_sds = np.array([0.005, 0.05, 0.05, 0.05])\n\nfor t in range(1, n_samples):\n    proposal = current_beta + np.random.normal(0, proposal_sds)\n    proposal_log_post = log_posterior(proposal)\n    accept_prob = min(1, np.exp(proposal_log_post - current_log_post))\n\n    if np.random.rand() < accept_prob:\n        current_beta = proposal\n        current_log_post = proposal_log_post\n\n    samples[t] = current_beta\n\n# Drop burn-in\nposterior_samples = samples[burn_in:]\nbayes_results={}\n# Posterior summaries\nfor i, name in enumerate(X_cols):\n    param_samples = posterior_samples[:, i]\n    mean = np.mean(param_samples)\n    std = np.std(param_samples)\n    ci_low, ci_high = np.percentile(param_samples, [2.5, 97.5])\n    print(f\"{name}: Beta = {mean:.4f}, SD = {std:.4f}, 95% CI = ({ci_low:.4f}, {ci_high:.4f})\")\n    bayes_results[name] = {\n        \"beta\": mean,\n        \"std\": std,\n        \"ci\": (ci_low, ci_high)\n    }\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nprice: Beta = -0.0968, SD = 0.0062, 95% CI = (-0.1092, -0.0849)\nbrand_N: Beta = 1.0599, SD = 0.1138, 95% CI = (0.8444, 1.3003)\nbrand_P: Beta = 0.4845, SD = 0.1136, 95% CI = (0.2721, 0.7098)\nad_Yes: Beta = -0.7801, SD = 0.0918, 95% CI = (-0.9606, -0.5981)\n```\n:::\n:::\n\n\nBelow is the trace plot of the algorithm, as well as the histogram of the posterior distribution for the price estimate.\n\n::: {#0744997a .cell execution_count=6}\n``` {.python .cell-code}\nprint(posterior_samples)\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Assuming price is at index 3\nprice_samples = posterior_samples[:, 0]\n\n# Plot\nplt.figure(figsize=(12, 4))\n\n# Trace Plot\n# Trace Plot\nplt.plot(price_samples, color='blue', linewidth=0.7)\nplt.title(\"Trace Plot: Price Coefficient\")\nplt.xlabel(\"Iteration\")\nplt.ylabel(\"Î² (price)\")\nplt.show()\n\n# Posterior Histogram\nplt.hist(price_samples, bins=40, color='skyblue', edgecolor='black', density=True)\nplt.title(\"Posterior Distribution: Price Coefficient\")\nplt.xlabel(\"Î² (price)\")\nplt.ylabel(\"Density\")\nplt.show()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[-0.10650537  1.27974524  0.71792105 -0.81615042]\n [-0.10292188  1.22902364  0.71818284 -0.80961323]\n [-0.10292188  1.22902364  0.71818284 -0.80961323]\n ...\n [-0.09516726  1.19575878  0.68254034 -0.69301451]\n [-0.09442549  1.11632281  0.6523968  -0.69341429]\n [-0.09442549  1.11632281  0.6523968  -0.69341429]]\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](hw3_questions_files/figure-html/cell-7-output-2.png){width=981 height=376}\n:::\n\n::: {.cell-output .cell-output-display}\n![](hw3_questions_files/figure-html/cell-7-output-3.png){width=585 height=449}\n:::\n:::\n\n\nThe trace plot for the price coefficient shows stable oscillations around a central value, indicating that the Markov Chain Monte Carlo (MCMC) sampler has converged and is mixing well. There is no upward or downward drift, suggesting the chain is sampling effectively from the posterior distribution.\n\nThe corresponding posterior distribution is approximately normal, centered around -0.10. This confirms a strong negative effect of price on product choice â€” as price increases, the probability of selection decreases. The tight, symmetric shape of the distribution reflects high certainty in this estimate.\n\nThe following table summarizes the estimates from MLE and Bayesian methods.\n\n::: {#7bec1512 .cell execution_count=7}\n\n::: {.cell-output .cell-output-display .cell-output-markdown execution_count=14}\n| Parameter | MLE Estimate (SE) | 95% CI (MLE) | Bayes Mean (SD) | 95% Credible Interval |\n|-----------|-------------------|--------------|------------------|------------------------|\n| **price** | -0.0964 (0.0061) | (-0.1084, -0.0844) | -0.0968 (0.0062) | (-0.1092, -0.0849) |\n| **brand_N** | 1.0569 (0.0120) | (1.0333, 1.0804) | 1.0599 (0.1138) | (0.8444, 1.3003) |\n| **brand_P** | 0.4733 (0.0709) | (0.3344, 0.6122) | 0.4845 (0.1136) | (0.2721, 0.7098) |\n| **ad_Yes** | -0.7724 (0.0313) | (-0.8337, -0.7111) | -0.7801 (0.0918) | (-0.9606, -0.5981) |\n\n:::\n:::\n\n\n## 6. Discussion\n\nInterpretation of Parameter Estimates\nIf the data were not simulated, the parameter estimates would reflect real-world consumer preferences inferred from observed choices. In that case:\n\nA finding like $ \\beta_\\text{Netflix} > \\beta_\\text{Prime} $ means that, on average, consumers derive more utility from choosing Netflix compared to Amazon Prime, holding all other attributes constant.\n\nThis could indicate that consumers perceive higher value or satisfaction from Netflixâ€™s offering (e.g., content library, user experience).\n\nIt also implies that, in the utility function a higher coefficient on Netflix leads to a higher probability of being chosen.\n\nRegarding price:\n\nA negative $\\beta_\\text{price}$ is expected and intuitive. It means that, all else equal, an increase in price decreases utility, which lowers the likelihood of the product being chosen.\n\nThis reflects basic economic theory: consumers prefer lower-cost options when utility from other features is equal.\n\n#### Multi-Level (Hierarchical) Model\n\nIn real-world conjoint analysis, consumer preferences are rarely homogeneous. The basic multinomial logit (MNL) model assumes that every individual shares the same set of preference parameters ($\\beta$), which is a strong and often unrealistic assumption.\n\nTo better reflect real-world heterogeneity in preferences, we use a **multi-level** model. Here's how this model can be both simulated and estimated:\n\n**1. Simulating Individual-Level Preferences**\n\nInstead of one global $\\beta$, we assume each respondent $i$ has their own parameter vector ${\\beta}_i$, drawn from a common population distribution:\n\n$$\n{\\beta}_i \\sim \\mathcal{N}({\\mu}, {\\Sigma})\n$$\n\n- ${\\mu}$: population mean of preferences  \n- ${\\Sigma}$: covariance matrix capturing variability and correlations between parameters  \n\nThis framework captures variation in individual tastes.\n\n---\n\n**2. Simulating Choice Data**\n\nUsing each individual's ${\\beta}_i$, simulate their choices for each task using the softmax choice probability:\n\n$$\nP_{ij} = \\frac{\\exp(\\mathbf{X}_{ij}^\\top {\\beta}_i)}{\\sum_k \\exp(\\mathbf{X}_{ik}^\\top {\\beta}_i)}\n$$\n\nWhere:\n- $j$ indexes alternatives\n- $\\mathbf{X}_{ij}$ are the attributes of alternative $j$\n- $P_{ij}$ is the probability that individual $i$ chooses alternative $j$\n\n---\n\n**3. Estimating the Model: Hierarchical Bayes**\n\nTo estimate a hierarchical model, use Hierarchical Bayesian (HB) methods such as:\n\n- Gibbs sampling  \n- Hamiltonian Monte Carlo \n- MCMC within Gibbs (as in traditional HB packages)\n\nThese methods estimate:\n\n- Individual-level coefficients $\\beta_i$\n- Population-level parameters $\\mu$, $\\Sigma$\n\nThis approach gives:\n- Personalized preference estimates\n- More realistic modeling of population behavior\n- Better predictive performance\n\n---\n\n",
    "supporting": [
      "hw3_questions_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}